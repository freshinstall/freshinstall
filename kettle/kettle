#!/usr/bin/python3

## kettle - Desktop software configuration manager
# Copyright (c) 2018, freshinstall
# All rights reserved.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND ISC DISCLAIMS ALL WARRANTIES WITH REGARD 
# TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR  ANY SPECIAL, DIRECT, INDIRECT,
# OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.

import logging, argparse, os
import  gettext
_ = gettext.gettext

from kettle import action, ket

def create(log, path=None):
    log.info(_('Creating new kettle: %s' % path))
    act = action.Create()
    act.create(path)

def extract(log, path=None, extract_dir=None):
    try:
        kettle = ket.Kettle(path)
    except Exception as e:
        log.exception(e)
        exit()
    log.info(_('Extracting kettle %s from %s' % (kettle.get_id(), path)))
    act = action.Action(kettle)
    act.extract(path=extract_dir)

def install(log, path=None, extract_dir=None):
    try:
        kettle = ket.Kettle(path)
    except Exception as e:
        log.exception(e)
        exit()
    log.info(_('installing kettle %s from %s' % (kettle.ketid, path)))
    act = action.Action(kettle)
    act.install(kettle)


def gui(log, path=None):
    log.info(_('Running the GUI'))
    log.exception(_('The GUI is not yet implemented, Please use the CLI instead.'))

def main():

    # Set up some basic logging
    log = logging.getLogger('kettle')
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s %(name)-14s %(levelname)-8s %(message)s')
    handler.setFormatter(formatter)
    log.addHandler(handler)
    log.setLevel(logging.DEBUG)
    directory=None

    log.debug(_("Logging set up!"))

    # Argument processing
    parser = argparse.ArgumentParser(prog="kettle",
                                     description=_('Desktop configuration manager'),
                                     )
    parser.add_argument('action',
                        nargs='?',
                        default='gui',
                        help=_('What action to do.'),
                        metavar='COMMAND',
                        )
    parser.add_argument('file',
                        nargs='?',
                        default=os.getcwd(),
                        help=_('The path to operate with. Defaults to current directory.'),
                        metavar='PATH',
                        )
    parser.add_argument('-d', '--directory',
                        default=None,
                        type=str,
                        help=_('The directory to extract the kettle to or create it from.'),
                        dest=directory,
                        )
    args = parser.parse_args()

    action = {"create"  : create,
              "extract" : extract,
              "gui"     : gui,
              "install" : install,
    }
    if args.action:
        log.info(_('Got command: %s' % args.action))
        log.debug('Destination is %s' % args.directory)
        if args.directory == None:
            action[args.action](log, path=args.file)
        else:
            action[args.action](log, path=args.file, extract_dir=args.directory)

if __name__ == "__main__":
    main()
