#!/usr/bin/python3

## kettle - Desktop software configuration manager
# Copyright (c) 2018, Ian Santopietro <isantop@gmail.com>
# All rights reserved.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# kettle - main program

import logging, argparse, os
import  gettext
_ = gettext.gettext

from kettle import action, ket

def create(log, args):
    path = args.dir
    log.info(_('Creating new kettle: %s' % path))
    try:
        kettle = ket.NewKettle(path)
    except Exception as e:
        log.exception(e)
        exit()

    act = action.Action(kettle)
    act.create(path)
    kettle_info = act.info()
    for i in kettle_info:
        print(i)

def pack(log, args):
    path = args.dir
    log.info(_('Packing kettle: %s' % path))
    try:
        kettle = ket.NewKettle(path)
    except Exception as e:
        log.exception(e)
        exit()

    act = action.Action(kettle)
    act.create(path)
    kettle_info = act.info()
    for i in kettle_info:
        print(i)

def extract(log, args):
    path=args.kettle
    try:
        kettle = ket.Kettle(path)
    except Exception as e:
        log.exception(e)
        exit()
    extract_dir = kettle.tmppath
    if args.directory:
        extract_dir = args.directory
    log.info(_('Extracting kettle %s from %s to %s' % (kettle.get_id(), path, extract_dir)))
    act = action.Action(kettle)
    act.extract(path=extract_dir)

def install(log, args):
    path = args.kettle
    try:
        kettle = ket.Kettle(path)
    except Exception as e:
        log.exception(e)
        exit()
    log.info(_('installing kettle %s from %s' % (kettle.ketid, path)))
    act = action.Action(kettle)
    act.install(kettle)

def info(log, args):
    path = args.kettle
    try:
        kettle = ket.Kettle(path)
    except Exception as e:
        log.exception(e)
        exit()

    act = action.Action(kettle)
    kettle_info = act.info()
    for i in kettle_info:
        print(i)

def gui(log, args):
    log.info(_('Running the GUI'))
    log.exception(_('The GUI is not yet implemented, Please use the CLI instead.'))

def main():

    # Argument processing
    parser = argparse.ArgumentParser(prog="kettle",
                                     description=_('Desktop configuration manager'),
                                     epilog=_("For help with particular commands, "+
                                              "run `kettle COMMAND --help`")
                                     )
    parser.add_argument('-v', '--verbose',
                        help=_("Make output more verbose"),
                        action="count")
    subparsers = parser.add_subparsers(help=_("The command to run, from below:"),
                                       dest='action',
                                       metavar="COMMAND")

    # install subcommand
    parser_install = subparsers.add_parser('install',
                                           help=_("Install a kettle into the system"))
    parser_install.add_argument('kettle', help=_("The kettle to install"))
    parser_install.add_argument('-p', '--plugins',
                                help=_("A quote-wrapped, comma separated list " +
                                       "of plugins to install. Overrides the " +
                                       "list in the kettle"))
    parser_install.add_argument('-y', '--force-yes',
                                help=_("Automatically answer \"yes\" to any " +
                                       "plugin loading prompts. This does not " +
                                       "affect prompts from the script plugin"),
                                action="store_true")
    parser_install.add_argument('-n', '--force-no',
                                help=_("The opposite of -y"),
                                action="store_true")
    parser_install.add_argument('-s', '--dangerous',
                                help=_("Run scripts without verification. " +
                                       "This is dangerous."),
                                action="store_true")

    # create subcommand
    parser_create = subparsers.add_parser("create",
                                          help=_("Create a new blank kettle " +
                                                 "folder for customization."))
    parser_create.add_argument('-i', '--id',
                               help=_("The ID of the new kettle"))
    parser_create.add_argument('-b', '--backup',
                               help=_("Backs up the current system config into " +
                                      "The new kettle"),
                               action="store_true")

    # pack subcommand
    parser_pack = subparsers.add_parser('pack',
                                        help=_("Compress a directory into a " +
                                               "Kettle file."))
    parser_pack.add_argument('dir', help=_("The directory to pack"))

    # extract subcommand
    parser_extract = subparsers.add_parser('extract',
                                           help=_("Extracts a kettle file"))
    parser_extract.add_argument('kettle', help=_("The kettle to extract"))
    parser_extract.add_argument('-d', '--directory',
                                help=_("The directory to extract to"),
                                metavar="DIR")

    # info subcommand
    parser_info = subparsers.add_parser('info', help=_("Display kettle metadata."))
    parser_info.add_argument('kettle', help=_("The kettle whose metadata to display."))

    # gui subcommand
    parser_gui = subparsers.add_parser('gui', help=_("Display the kettle GUI"))

    args = parser.parse_args()

    action = {"create"  : create,
              "extract" : extract,
              "gui"     : gui,
              "install" : install,
              "info"    : info,
              "pack"    : pack,
    }
    if args.action:
        # Set up some basic logging
        log = logging.getLogger('kettle')
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s %(name)-22s %(levelname)-8s %(message)s')
        handler.setFormatter(formatter)
        log.addHandler(handler)
        log.setLevel(logging.DEBUG)
        directory=None

        log.debug(_("Logging set up!"))
        log.debug(_("Arguments passed: %s" % str(args)))
        log.debug(_('Got command: %s' % args.action))
        action[args.action](log, args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
